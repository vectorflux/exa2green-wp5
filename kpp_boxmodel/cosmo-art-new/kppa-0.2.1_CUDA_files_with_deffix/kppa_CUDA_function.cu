/*--------------------- BEGIN kppa_CUDA_function.cu BEGIN ---------------------*/
/* @file kppa_CUDA_function.cu                                                 */
/* @author charlesj                                                            */
/* @date 2015-07-06 14:41:44.760238                                            */
/* @brief The ODE function of the chemical model                               */
/*                                                                             */
/* The ODE function of the chemical model                                      */
/*                                                                             */
/* This file was generated by Kppa: http://www.paratools.com/Kppa              */
/*-----------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>
#include "kppa_CUDA_cu_parameters.h"
#include "kppa_CUDA_sparse.h"
#include "kppa_CUDA_function.h"


/* Indices of variable species concentrations, grouped by reaction */
__constant__
int IVAR[362] = { 74, 77, 77, 12, 44, 32, 79, 79, 35, 63, 63, 70, 29, 59, 27,
    54, 46, 46, 62, 50, 69, 34, 39, 34, 74, 1, 26, 26, 39, 26, 65, 76, 77,
    77, 81, 72, 77, 72, 76, 72, 74, 72, 72, 65, 72, 72, 35, 81, 76, 81, 39,
    76, 76, 74, 77, 76, 79, 74, 79, 72, 79, 74, 79, 16, 16, 74, 81, 44, 81,
    32, 81, 72, 81, 15, 81, 41, 81, 81, 8, 81, 21, 81, 10, 81, 14, 81, 36,
    81, 43, 81, 68, 81, 19, 81, 20, 81, 30, 81, 63, 81, 70, 81, 54, 81, 46,
    81, 62, 81, 50, 81, 29, 81, 59, 81, 27, 81, 33, 81, 69, 81, 45, 81, 74,
    80, 33, 64, 74, 11, 75, 76, 73, 76, 51, 76, 52, 76, 55, 76, 56, 76, 53,
    76, 76, 80, 64, 76, 58, 76, 48, 76, 71, 76, 76, 78, 61, 76, 63, 79, 70,
    79, 46, 79, 62, 79, 50, 79, 30, 79, 36, 79, 43, 79, 68, 79, 45, 79, 36,
    77, 43, 77, 68, 77, 45, 77, 72, 75, 71, 72, 72, 73, 51, 72, 52, 72, 55,
    72, 56, 72, 53, 72, 72, 78, 72, 80, 58, 72, 48, 72, 64, 72, 61, 72, 75,
    75, 71, 75, 73, 75, 51, 75, 52, 75, 55, 75, 56, 75, 53, 75, 75, 78, 75,
    80, 58, 75, 48, 75, 64, 75, 71, 80, 73, 80, 51, 80, 52, 80, 55, 80, 56,
    80, 53, 80, 78, 80, 80, 80, 58, 80, 48, 80, 64, 80, 57, 72, 57, 75, 57,
    80, 57, 76, 47, 74, 47, 72, 47, 75, 47, 80, 61, 75, 61, 80, 61, 61, 40,
    81, 40, 79, 40, 77, 67, 76, 67, 72, 67, 75, 67, 80, 67, 79, 42, 81, 42,
    79, 42, 77, 66, 76, 66, 72, 66, 75, 66, 80, 66, 79, 37, 76, 37, 72, 37,
    37, 9, 81, 38, 81, 49, 81, 49, 77, 60, 76, 60, 72, 60, 60, 60, 74, 28,
    28, 81, 17, 81, 31, 81, 22, 81, 18, 79, 18, 81, 18, 81, 13, 81, 23, 81,
    24, 81, 25, 81, 0 };

/* Indices in IVAR of first variable concentration in reaction */
__constant__
int CVAR[195] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 46, 48,
    50, 53, 55, 57, 59, 61, 63, 64, 65, 67, 69, 71, 73, 75, 77, 78, 80, 82,
    84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114,
    116, 118, 120, 122, 124, 125, 127, 128, 130, 132, 134, 136, 138, 140,
    142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168,
    170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196,
    198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224,
    226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252,
    254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280,
    282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308,
    310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336,
    338, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 362 };

/* Indices of fixed species concentrations, grouped by reaction */
__constant__
int IFIX[1] = { 0 };

/* Indices in IFIX of first fixed concentration in reaction */
__constant__
int CFIX[195] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1 };


/*----------------------------------- d_Fun0 ----------------------------------*/
/* CUDA kernel for Fun                                                         */
/*                                                                             */
/* @param[in]     ncells32 A multiple of 32 grid cells                         */
/* @param[in]     var      Variable species concentrations                     */
/* @param[in]     fix      Fixed species concentrations                        */
/* @param[in]     rct      Reaction rates                                      */
/* @param[out]    A        Reaction rates                                      */
/*-----------------------------------------------------------------------------*/
__global__
void d_Fun0(size_t const ncells32, double const * var, double const * fix,
    double const * rct, double* A)
{

    size_t idx = blockDim.x*blockIdx.x + threadIdx.x;
    size_t ridx = idx / ncells32;
    size_t cidx = idx % ncells32;

    var += cidx;
    fix += cidx;
    rct += cidx;
    A += cidx;

    if(ridx < NREACT) {
        double acc = rct[ridx*ncells32];
        for(int i=CVAR[ridx]; i<CVAR[ridx+1]; ++i) {
            acc *= var[IVAR[i]*ncells32];
        }
        for(int i=CFIX[ridx]; i<CFIX[ridx+1]; ++i) {
            acc *= fix[IFIX[i]*ncells32];
        }
        A[ridx*ncells32] = acc;
    }
}/* END d_Fun0 */


/*----------------------------------- d_Fun1 ----------------------------------*/
/* CUDA kernel for Fun                                                         */
/*                                                                             */
/* @param[in]     ncells32 A multiple of 32 grid cells                         */
/* @param[in]     A        Reaction rates                                      */
/* @param[out]    vardot   The ODE function                                    */
/*-----------------------------------------------------------------------------*/
__global__
void d_Fun1(size_t const ncells32, double const * A, double* vardot)
{

    size_t idx = blockDim.x*blockIdx.x + threadIdx.x;
    size_t fidx = idx / ncells32;
    size_t cidx = idx % ncells32;

    A += cidx;
    vardot += cidx;

    if(fidx < NVAR) {
        double s = 0;
        for(int i=STOICH_CROW[fidx]; i<STOICH_CROW[fidx+1]; ++i) {
            s += STOICH[i] * A[STOICH_ICOL[i]*ncells32];
        }
        vardot[fidx*ncells32] = s;
    }
}/* END d_Fun1 */


/*------------------------------------ Fun ------------------------------------*/
/* The ODE function of the chemical model                                      */
/*                                                                             */
/* @param[in]     ncells32  A multiple of 32 grid cells                        */
/* @param[in]     d_var     Variable species concentrations in device memory   */
/* @param[in]     d_fix     Fixed species concentrations in device memory      */
/* @param[in]     d_rct     Reaction rates in device memory                    */
/* @param[out]    d_vardot  The ODE function in device memory                  */
/* @param[in,out] d_scratch Scratch device memory                              */
/*-----------------------------------------------------------------------------*/
void Fun(size_t const ncells32, double const * d_var, double const * d_fix,
    double const * d_rct, double* d_vardot, double* d_scratch)
{

    size_t nThreads = 256;
    size_t nThreads0 = NREACT * ncells32;
    size_t nThreads1 = NVAR * ncells32;
    size_t nBlocks0 = ((nThreads0 + 255) & ~255) >> 8;
    size_t nBlocks1 = ((nThreads1 + 255) & ~255) >> 8;

    d_Fun0<<<nBlocks0, nThreads>>>(ncells32, d_var, d_fix, d_rct, d_scratch);
    d_Fun1<<<nBlocks1, nThreads>>>(ncells32, d_scratch, d_vardot);
}/* END Fun */



/*------------------------ END kppa_CUDA_function.h END -----------------------*/
