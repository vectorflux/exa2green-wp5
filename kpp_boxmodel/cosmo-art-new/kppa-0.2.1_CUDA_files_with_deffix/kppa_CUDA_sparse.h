/*----------------------- BEGIN kppa_CUDA_sparse.h BEGIN ----------------------*/
/* @file kppa_CUDA_sparse.h                                                    */
/* @author charlesj                                                            */
/* @date 2015-01-22 16:21:35.641358                                            */
/* @brief Data and utilities for row-compressed sparse matrices                */
/*                                                                             */
/* The following matrices are represented here in row-compressed form:         */
/* @li The Jacobian                                                            */
/* @li The LU decomposition of the Jacobian                                    */
/* @li The stoichiometric matrix                                               */
/*                                                                             */
/* This file was generated by Kppa: http://www.paratools.com/Kppa              */
/*-----------------------------------------------------------------------------*/

#ifndef __KPPA_CUDA_SPARSE_H__
#define __KPPA_CUDA_SPARSE_H__



#ifdef __cplusplus
extern "C" {
#endif



/* Number of nonzero entries in the Jacobian */
#define JAC_NZ           ((size_t)(968))

/* Number of nonzero entries in the LU decomposition of the Jacobian */
#define JAC_LU_NZ        ((size_t)(968))

/* Number of nonzero entries in the stoichiometric matrix */
#define STOICH_NZ        ((size_t)(931))

/* Number of nonzero entries in the left-side stoichiometric matrix */
#define LHS_STOICH_NZ    ((size_t)(355))

/* Number of nonzero entries in the right-side stoichiometric matrix */
#define RHS_STOICH_NZ    ((size_t)(594))


/* Row indices of elements in the row-compressed Jacobian */
__device__
int const JAC_IROW[968] = { 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13,
    13, 13, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18,
    18, 19, 19, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
    25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27,
    28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31,
    31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
    35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38,
    38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40,
    40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
    41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46,
    46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48,
    48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50,
    50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52,
    52, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
    54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56,
    56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    57, 57, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59,
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
    61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
    71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
    73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
    77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78,
    78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81 };

/* Column indices of elements in the row-compressed Jacobian */
__device__
int const JAC_ICOL[968] = { 0, 1, 2, 15, 81, 3, 36, 42, 43, 45, 49, 68, 77,
    4, 42, 43, 51, 52, 53, 55, 56, 61, 64, 68, 71, 73, 75, 77, 78, 80, 5, 19,
    20, 23, 40, 42, 43, 45, 68, 77, 79, 81, 6, 27, 7, 63, 8, 81, 9, 37, 72,
    81, 10, 81, 11, 64, 74, 12, 76, 81, 13, 18, 81, 14, 81, 13, 15, 18, 79,
    81, 16, 74, 79, 17, 60, 72, 81, 18, 79, 81, 19, 81, 20, 81, 21, 81, 22,
    38, 81, 14, 19, 20, 23, 24, 40, 42, 43, 45, 68, 77, 79, 81, 19, 20, 24,
    25, 40, 42, 43, 45, 68, 77, 79, 81, 19, 20, 25, 40, 42, 43, 68, 77, 79,
    81, 1, 26, 39, 65, 77, 27, 72, 80, 81, 28, 60, 74, 81, 29, 72, 75, 81,
    19, 20, 30, 79, 81, 28, 31, 38, 60, 74, 76, 81, 32, 72, 74, 81, 33, 74,
    80, 81, 1, 26, 34, 39, 65, 74, 77, 79, 35, 40, 42, 45, 65, 72, 77, 81,
    36, 77, 79, 81, 37, 45, 72, 76, 81, 37, 38, 45, 72, 76, 79, 81, 32, 34,
    39, 65, 72, 74, 76, 77, 79, 81, 40, 77, 79, 81, 22, 36, 38, 40, 41, 42,
    43, 45, 46, 49, 60, 62, 63, 64, 68, 70, 72, 75, 76, 77, 79, 80, 81, 42,
    77, 79, 81, 42, 43, 77, 79, 81, 16, 30, 44, 46, 50, 62, 63, 70, 72, 74,
    79, 81, 45, 77, 79, 81, 46, 58, 64, 75, 76, 79, 80, 81, 30, 47, 72, 74,
    75, 79, 80, 81, 20, 48, 72, 75, 76, 80, 81, 9, 37, 42, 45, 49, 66, 72,
    75, 76, 77, 79, 80, 81, 48, 50, 58, 72, 75, 76, 79, 80, 81, 10, 51, 72,
    75, 76, 80, 81, 14, 52, 72, 75, 76, 80, 81, 53, 68, 72, 75, 76, 80, 81,
    21, 40, 51, 52, 53, 54, 67, 68, 69, 72, 73, 75, 76, 77, 79, 80, 81, 36,
    55, 72, 75, 76, 77, 79, 80, 81, 43, 56, 72, 75, 76, 77, 79, 80, 81, 10,
    14, 30, 33, 57, 64, 72, 74, 75, 76, 79, 80, 81, 19, 58, 72, 75, 76, 80,
    81, 47, 48, 51, 52, 53, 55, 56, 57, 58, 59, 64, 66, 67, 68, 71, 72, 73,
    74, 75, 76, 77, 78, 79, 80, 81, 17, 28, 45, 49, 60, 66, 72, 74, 75, 76,
    77, 79, 80, 81, 36, 40, 42, 43, 61, 68, 72, 75, 76, 77, 79, 80, 81, 31,
    38, 45, 48, 49, 58, 60, 62, 64, 66, 72, 74, 75, 76, 77, 78, 79, 80, 81,
    21, 22, 29, 33, 36, 37, 38, 42, 43, 45, 46, 47, 48, 51, 52, 53, 55, 56,
    57, 58, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 11, 30, 50, 58, 64, 72, 74, 75, 76, 79, 80, 81, 8, 10, 14, 21,
    26, 27, 32, 35, 39, 40, 42, 44, 45, 46, 50, 54, 58, 62, 63, 64, 65, 66,
    67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 42, 66, 72,
    75, 76, 77, 79, 80, 81, 40, 67, 72, 75, 76, 77, 79, 80, 81, 66, 68, 72,
    75, 76, 77, 79, 80, 81, 47, 51, 52, 61, 66, 67, 68, 69, 72, 73, 74, 75,
    76, 77, 79, 80, 81, 21, 40, 43, 51, 52, 53, 55, 56, 59, 61, 64, 66, 67,
    68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 8, 40, 42, 54,
    67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 15, 18, 19, 20, 21,
    29, 30, 31, 32, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 21, 59, 64, 66, 67, 68,
    69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 11, 16, 22, 28, 32, 33,
    34, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60,
    61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
    79, 80, 81, 27, 29, 43, 45, 47, 48, 51, 52, 53, 55, 56, 57, 58, 61, 64,
    66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 12, 34, 37,
    39, 45, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 34, 36, 39, 40, 42, 43,
    45, 49, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
    81, 40, 42, 54, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 16,
    18, 30, 33, 36, 40, 42, 43, 44, 45, 46, 50, 58, 62, 63, 64, 66, 67, 68,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 27, 33, 45, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70,
    71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 8, 10, 12, 13, 14, 15, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36,
    38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 54, 58, 59, 60, 62, 63, 64,
    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81 };

/* Start-of-row indices in the row-compressed Jacobian */
__device__
int const JAC_CROW[83] = { 0, 1, 2, 5, 13, 30, 42, 44, 46, 48, 52, 54, 57,
    60, 63, 65, 70, 73, 77, 80, 82, 84, 86, 89, 102, 114, 124, 129, 133, 137,
    141, 146, 153, 157, 161, 169, 177, 181, 186, 193, 203, 207, 230, 234,
    239, 251, 255, 263, 271, 278, 291, 300, 307, 314, 321, 338, 347, 356,
    369, 376, 401, 415, 428, 447, 485, 497, 534, 543, 552, 561, 578, 605,
    622, 675, 693, 738, 768, 801, 826, 842, 873, 908, 968 };

/* Diagonal indices in the row-compressed Jacobian */
__device__
int const JAC_DIAG[83] = { 0, 1, 2, 5, 13, 30, 42, 44, 46, 48, 52, 54, 57,
    60, 63, 66, 70, 73, 77, 80, 82, 84, 86, 92, 104, 116, 125, 129, 133, 137,
    143, 147, 153, 157, 163, 169, 177, 181, 187, 195, 203, 211, 230, 235,
    241, 251, 255, 264, 272, 282, 292, 301, 308, 314, 326, 339, 348, 360,
    370, 385, 405, 419, 435, 469, 489, 517, 535, 544, 553, 568, 593, 612,
    665, 684, 730, 761, 795, 821, 838, 870, 906, 967, 968 };

/* Row indices of elements in the row-compressed LU decomposition of the Jacobian */
__device__
int const JAC_LU_IROW[968] = { 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12,
    13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18,
    18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27,
    27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31,
    31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34,
    34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37,
    38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40,
    40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
    41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46,
    46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48,
    48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50,
    50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52,
    52, 52, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54,
    54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56,
    56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
    57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59,
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60,
    60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
    61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
    71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
    73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
    77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78,
    78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81 };

/* Column indices of elements in the row-compressed LU decomposition of the Jacobian */
__device__
int const JAC_LU_ICOL[968] = { 0, 1, 2, 15, 81, 3, 36, 42, 43, 45, 49, 68,
    77, 4, 42, 43, 51, 52, 53, 55, 56, 61, 64, 68, 71, 73, 75, 77, 78, 80, 5,
    19, 20, 23, 40, 42, 43, 45, 68, 77, 79, 81, 6, 27, 7, 63, 8, 81, 9, 37,
    72, 81, 10, 81, 11, 64, 74, 12, 76, 81, 13, 18, 81, 14, 81, 13, 15, 18,
    79, 81, 16, 74, 79, 17, 60, 72, 81, 18, 79, 81, 19, 81, 20, 81, 21, 81,
    22, 38, 81, 14, 19, 20, 23, 24, 40, 42, 43, 45, 68, 77, 79, 81, 19, 20,
    24, 25, 40, 42, 43, 45, 68, 77, 79, 81, 19, 20, 25, 40, 42, 43, 68, 77,
    79, 81, 1, 26, 39, 65, 77, 27, 72, 80, 81, 28, 60, 74, 81, 29, 72, 75,
    81, 19, 20, 30, 79, 81, 28, 31, 38, 60, 74, 76, 81, 32, 72, 74, 81, 33,
    74, 80, 81, 1, 26, 34, 39, 65, 74, 77, 79, 35, 40, 42, 45, 65, 72, 77,
    81, 36, 77, 79, 81, 37, 45, 72, 76, 81, 37, 38, 45, 72, 76, 79, 81, 32,
    34, 39, 65, 72, 74, 76, 77, 79, 81, 40, 77, 79, 81, 22, 36, 38, 40, 41,
    42, 43, 45, 46, 49, 60, 62, 63, 64, 68, 70, 72, 75, 76, 77, 79, 80, 81,
    42, 77, 79, 81, 42, 43, 77, 79, 81, 16, 30, 44, 46, 50, 62, 63, 70, 72,
    74, 79, 81, 45, 77, 79, 81, 46, 58, 64, 75, 76, 79, 80, 81, 30, 47, 72,
    74, 75, 79, 80, 81, 20, 48, 72, 75, 76, 80, 81, 9, 37, 42, 45, 49, 66,
    72, 75, 76, 77, 79, 80, 81, 48, 50, 58, 72, 75, 76, 79, 80, 81, 10, 51,
    72, 75, 76, 80, 81, 14, 52, 72, 75, 76, 80, 81, 53, 68, 72, 75, 76, 80,
    81, 21, 40, 51, 52, 53, 54, 67, 68, 69, 72, 73, 75, 76, 77, 79, 80, 81,
    36, 55, 72, 75, 76, 77, 79, 80, 81, 43, 56, 72, 75, 76, 77, 79, 80, 81,
    10, 14, 30, 33, 57, 64, 72, 74, 75, 76, 79, 80, 81, 19, 58, 72, 75, 76,
    80, 81, 47, 48, 51, 52, 53, 55, 56, 57, 58, 59, 64, 66, 67, 68, 71, 72,
    73, 74, 75, 76, 77, 78, 79, 80, 81, 17, 28, 45, 49, 60, 66, 72, 74, 75,
    76, 77, 79, 80, 81, 36, 40, 42, 43, 61, 68, 72, 75, 76, 77, 79, 80, 81,
    31, 38, 45, 48, 49, 58, 60, 62, 64, 66, 72, 74, 75, 76, 77, 78, 79, 80,
    81, 21, 22, 29, 33, 36, 37, 38, 42, 43, 45, 46, 47, 48, 51, 52, 53, 55,
    56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78,
    79, 80, 81, 11, 30, 50, 58, 64, 72, 74, 75, 76, 79, 80, 81, 8, 10, 14,
    21, 26, 27, 32, 35, 39, 40, 42, 44, 45, 46, 50, 54, 58, 62, 63, 64, 65,
    66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 42, 66,
    72, 75, 76, 77, 79, 80, 81, 40, 67, 72, 75, 76, 77, 79, 80, 81, 66, 68,
    72, 75, 76, 77, 79, 80, 81, 47, 51, 52, 61, 66, 67, 68, 69, 72, 73, 74,
    75, 76, 77, 79, 80, 81, 21, 40, 43, 51, 52, 53, 55, 56, 59, 61, 64, 66,
    67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 8, 40, 42,
    54, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 15, 18, 19, 20,
    21, 29, 30, 31, 32, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 21, 59, 64, 66, 67,
    68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 11, 16, 22, 28, 32,
    33, 34, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
    78, 79, 80, 81, 27, 29, 43, 45, 47, 48, 51, 52, 53, 55, 56, 57, 58, 61,
    64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 12, 34,
    37, 39, 45, 48, 51, 52, 53, 55, 56, 57, 58, 60, 61, 64, 65, 66, 67, 68,
    69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 34, 36, 39, 40, 42,
    43, 45, 49, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 40, 42, 54, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
    16, 18, 30, 33, 36, 40, 42, 43, 44, 45, 46, 50, 58, 62, 63, 64, 66, 67,
    68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 27, 33, 45, 47, 48,
    49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 66, 67, 68, 69,
    70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 8, 10, 12, 13, 14, 15,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,
    36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 54, 58, 59, 60, 62, 63,
    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81 };

/* Start-of-row indices in the row-compressed LU decomposition of the Jacobian */
__device__
int const JAC_LU_CROW[83] = { 0, 1, 2, 5, 13, 30, 42, 44, 46, 48, 52, 54, 57,
    60, 63, 65, 70, 73, 77, 80, 82, 84, 86, 89, 102, 114, 124, 129, 133, 137,
    141, 146, 153, 157, 161, 169, 177, 181, 186, 193, 203, 207, 230, 234,
    239, 251, 255, 263, 271, 278, 291, 300, 307, 314, 321, 338, 347, 356,
    369, 376, 401, 415, 428, 447, 485, 497, 534, 543, 552, 561, 578, 605,
    622, 675, 693, 738, 768, 801, 826, 842, 873, 908, 968 };

/* Diagonal indices in the row-compressed LU decomposition of the Jacobian */
__device__
int const JAC_LU_DIAG[83] = { 0, 1, 2, 5, 13, 30, 42, 44, 46, 48, 52, 54, 57,
    60, 63, 66, 70, 73, 77, 80, 82, 84, 86, 92, 104, 116, 125, 129, 133, 137,
    143, 147, 153, 157, 163, 169, 177, 181, 187, 195, 203, 211, 230, 235,
    241, 251, 255, 264, 272, 282, 292, 301, 308, 314, 326, 339, 348, 360,
    370, 385, 405, 419, 435, 469, 489, 517, 535, 544, 553, 568, 593, 612,
    665, 684, 730, 761, 795, 821, 838, 870, 906, 967, 968 };

/* Row indices of elements in the row-compressed stoichiometric matrix */
__device__
int const STOICH_IROW[931] = { 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
    7, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15, 15, 15, 15, 16, 16,
    16, 17, 17, 18, 18, 18, 19, 20, 21, 22, 22, 23, 23, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25,
    25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 28, 28,
    28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33,
    33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36,
    37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
    39, 39, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
    41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 43, 43,
    43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 46, 46,
    46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
    50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54,
    54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
    54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57,
    57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59,
    59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60,
    61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
    64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
    65, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
    68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71,
    71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76,
    76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
    77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 82, 82, 82 };

/* Column indices of elements in the row-compressed stoichiometric matrix */
__device__
int const STOICH_ICOL[931] = { 47, 100, 101, 102, 103, 164, 176, 101, 102,
    127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 152, 164, 55, 56, 57,
    58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163, 164, 190, 14, 9,
    50, 171, 173, 52, 74, 75, 3, 34, 188, 189, 53, 47, 186, 187, 188, 189,
    40, 41, 42, 178, 183, 186, 187, 188, 57, 58, 51, 174, 185, 53, 55, 56,
    57, 58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163, 164, 190,
    191, 55, 56, 57, 58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163,
    164, 191, 192, 55, 56, 57, 58, 97, 98, 101, 102, 154, 155, 156, 162, 163,
    164, 192, 1, 23, 24, 25, 14, 68, 113, 180, 181, 182, 12, 66, 104, 57, 58,
    59, 95, 174, 177, 179, 182, 184, 5, 30, 45, 69, 72, 73, 0, 2, 7, 21, 22,
    23, 24, 8, 31, 32, 33, 103, 156, 164, 54, 96, 100, 71, 170, 171, 172, 99,
    170, 174, 1, 2, 6, 21, 22, 26, 27, 28, 35, 38, 39, 45, 46, 154, 155, 156,
    9, 10, 11, 16, 17, 18, 48, 60, 63, 64, 84, 90, 92, 93, 100, 101, 102,
    103, 130, 142, 156, 164, 176, 177, 179, 185, 162, 163, 164, 55, 97, 101,
    164, 4, 39, 42, 43, 44, 90, 91, 92, 93, 94, 95, 71, 99, 103, 16, 17, 63,
    84, 85, 92, 128, 130, 140, 142, 95, 147, 148, 149, 150, 58, 86, 115, 129,
    141, 103, 164, 165, 167, 168, 169, 170, 172, 173, 175, 176, 19, 65, 85,
    86, 94, 128, 129, 140, 141, 52, 78, 107, 121, 133, 53, 79, 108, 122, 134,
    56, 82, 111, 125, 137, 15, 20, 51, 62, 77, 78, 79, 82, 102, 120, 121,
    122, 125, 132, 133, 134, 137, 156, 157, 159, 160, 161, 54, 80, 109, 123,
    135, 55, 81, 110, 124, 136, 52, 53, 59, 69, 84, 130, 142, 143, 144, 145,
    146, 57, 85, 114, 128, 140, 13, 67, 105, 106, 107, 108, 109, 110, 111,
    112, 114, 115, 116, 143, 148, 158, 166, 103, 175, 177, 178, 179, 180,
    181, 183, 89, 96, 97, 98, 117, 151, 152, 153, 155, 163, 18, 64, 84, 85,
    86, 88, 93, 126, 128, 129, 130, 138, 140, 141, 142, 176, 177, 179, 184,
    9, 10, 12, 16, 17, 51, 60, 66, 69, 76, 77, 79, 80, 81, 82, 89, 90, 100,
    101, 102, 103, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
    129, 130, 135, 136, 137, 144, 149, 151, 152, 153, 159, 164, 165, 167,
    168, 169, 170, 172, 177, 179, 185, 19, 59, 65, 74, 75, 84, 94, 116, 130,
    142, 25, 33, 44, 45, 46, 49, 50, 51, 52, 53, 60, 61, 62, 63, 64, 65, 68,
    162, 165, 166, 167, 168, 169, 154, 157, 158, 159, 160, 161, 56, 98, 102,
    165, 167, 168, 169, 20, 70, 77, 78, 79, 117, 147, 157, 165, 11, 13, 20,
    51, 61, 67, 77, 78, 79, 80, 81, 82, 87, 89, 91, 101, 102, 119, 120, 121,
    122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 151, 152, 153,
    156, 157, 159, 160, 161, 15, 50, 87, 105, 119, 131, 156, 164, 5, 10, 11,
    12, 13, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 39, 46, 47, 48, 51,
    57, 58, 59, 60, 63, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90,
    92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
    114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142,
    143, 144, 148, 149, 151, 156, 157, 158, 159, 160, 161, 164, 165, 166,
    167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 184, 51, 67, 70, 77,
    106, 120, 132, 0, 4, 5, 7, 20, 22, 26, 29, 30, 35, 36, 37, 40, 41, 43,
    45, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
    88, 89, 146, 147, 151, 152, 153, 157, 161, 165, 169, 170, 177, 180, 181,
    182, 185, 11, 14, 49, 66, 76, 83, 101, 102, 103, 104, 118, 119, 120, 121,
    122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
    136, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 151, 152, 159,
    160, 167, 168, 0, 3, 6, 22, 26, 29, 34, 35, 37, 38, 76, 77, 78, 79, 80,
    81, 82, 83, 84, 85, 86, 87, 88, 89, 146, 157, 165, 170, 177, 1, 2, 21,
    26, 27, 28, 36, 100, 101, 102, 103, 156, 164, 176, 62, 88, 112, 126, 138,
    156, 164, 6, 7, 36, 37, 38, 39, 40, 41, 44, 69, 90, 91, 92, 93, 94, 95,
    96, 97, 98, 99, 155, 161, 163, 169, 186, 15, 18, 19, 61, 64, 68, 72, 73,
    83, 84, 91, 93, 103, 113, 127, 130, 131, 132, 133, 134, 135, 136, 137,
    138, 139, 140, 141, 142, 145, 150, 152, 160, 168, 176, 177, 3, 4, 8, 12,
    13, 14, 25, 27, 28, 29, 33, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
    53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
    71, 101, 102, 103, 154, 156, 162, 164, 174, 175, 176, 182, 183, 184, 185,
    187, 188, 189, 190, 191, 192, 49, 101, 102 };

/* Start-of-row indices in the row-compressed stoichiometric matrix */
__device__
int const STOICH_CROW[86] = { 0, 0, 0, 1, 7, 21, 38, 39, 40, 41, 43, 44, 46,
    48, 50, 51, 56, 59, 61, 64, 65, 66, 67, 69, 88, 106, 121, 125, 128, 131,
    134, 138, 143, 146, 149, 156, 163, 166, 170, 173, 186, 189, 215, 218,
    222, 233, 236, 246, 251, 256, 267, 276, 281, 286, 291, 313, 318, 323,
    334, 339, 356, 364, 374, 393, 446, 456, 473, 479, 485, 492, 501, 540,
    548, 655, 662, 712, 757, 786, 800, 807, 832, 867, 928, 931, 931, 931 };

/* Stoichiometric coefficients */
__device__
double const STOICH[931] = { 1.0, 0.4, 0.2, 0.06, 0.28, 0.01, 0.45, 0.2,
    0.29, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.07,
    0.00105, 0.007, 0.0054433, 0.04417, 0.0034, 0.00105, 0.007, 0.00105,
    0.007, 0.0034, 0.08103, 0.08103, 0.83663, 0.08103, 0.08103, 0.08103,
    1.075, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 0.4, -1.0,
    -1.0, -1.0, 1.0, 1.0, 0.6, 0.6, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 0.2033, 0.0021, 0.01353, 0.1314,
    0.17667, 0.01133, 0.0021, 0.01353, 0.0021, 0.01353, 0.01133, 0.06936,
    0.06936, 0.06936, 0.06936, 0.06936, 0.06936, -1.0, 1.075, 0.014, 0.04013,
    0.3833, 0.22083, 0.0056667, 0.014, 0.04013, 0.014, 0.04013, 0.0056667,
    0.27087, 0.27087, 0.27087, 0.27087, 0.27087, 0.27087, -1.0, 1.075,
    0.0525, 0.11667, 0.49289, 0.30917, 0.0525, 0.11667, 0.0525, 0.11667,
    0.459, 0.459, 0.459, 0.459, 0.459, 0.459, -1.0, 1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 0.25, 0.17, -1.0,
    -0.5, 1.0, 0.25, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0,
    1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 0.09, 0.02, 0.02,
    -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -2.0, 1.0, 0.046, -1.0, 1.0, 1.0, 1.0,
    -1.0, 1.0, 1.0, 1.0, 2.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0,
    1.0, 1.0, 1.0, 1.87, 1.55, 1.0, -1.0, 1.0, 2.0, 1.0, 0.95, 1.0, 2.0, 1.0,
    0.42, 0.33, 0.23, 0.14, 0.475, 0.95, 0.14, 0.14, 0.22, 0.25, 0.5, 1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.46, -1.0, 1.0, 2.0, 1.0, -1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.89, 0.16,
    -1.0, 0.16, 0.445, 0.16, 0.89, 1.0, -1.0, -1.0, -1.0, -1.0, 0.83, -1.0,
    -1.0, -1.0, -1.0, 0.65, 0.79, 0.4, 0.6, 0.6, 0.6, 1.0, 2.0, 1.0, -1.0,
    -1.0, -1.0, -1.0, 0.7, 0.806, -1.0, 0.7, 0.806, 0.7, 0.806, 1.0, -1.0,
    -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, 0.8, 0.025, -1.0, 0.25, 0.69, 1.06, 0.1, 0.1, 0.26, 0.75,
    1.39, 0.55, 0.26, 0.75, 1.39, 0.55, 0.53, 0.8, 1.0, 1.0, 1.0, 1.0, -1.0,
    -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 0.25, 0.75, 0.9, 1.0, 2.0,
    1.0, 2.0, -1.0, -1.0, -1.0, -1.0, 0.75, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.1, 1.0, -1.0, -1.0, -2.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    1.0, -1.0, -1.0, -1.0, -2.0, 1.0, 1.0, -1.0, -1.0, 0.11, 0.17, 0.45, 1.0,
    -1.0, 0.75, 0.17, 0.45, 0.055, 1.0, 0.17, 0.45, 0.11, 0.9, 0.5, 1.0, 1.0,
    -1.0, -1.0, 1.0, 0.13, 0.45, 0.009, -1.0, 0.5, 1.0, 1.0, 0.09, 0.04, 1.6,
    1.0, 0.28, 1.0, -1.0, 1.0, 0.53, 0.18, 0.58, 1.5, 0.75, 0.84, 0.77, 0.8,
    1.55, 1.25, 0.89, 0.75, 1.0, 1.0, 1.0, 0.5, 0.8, 0.5, 0.14, 1.0, 1.0,
    1.75, 1.0, 2.0, 1.0, 0.04, 0.25, 1.4, 0.4, 0.4, 1.0, 1.0, 0.75, 0.5, 1.0,
    1.0, 0.9, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, 0.25, 0.4, 0.4, 0.4, -1.0, -1.0, 0.036, 0.08, 0.24,
    1.0, 1.0, 0.2, 0.35, -1.0, 1.0, 0.2, 0.075, -1.0, 0.5, 0.75, 0.38, 0.35,
    0.2, 1.0, 1.45, 1.0, 1.0, -1.0, 0.5, 0.72, 0.75, 0.77, 0.41, 0.46, 0.35,
    0.75, 0.725, 1.0, 0.77, 0.41, 0.46, 0.6, 1.0, 0.725, 1.0, 1.0, 2.0, 0.65,
    0.8, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 0.2, 0.16, 1.0,
    2.0, 1.0, 1.0, 1.0, 0.8, 1.0, 0.98, 1.0, 1.0, -1.0, -1.0, -1.0, -2.0,
    -2.0, 1.0, -1.0, -1.0, 1.0, 1.0, 0.17, 0.25, 0.17, 0.1, 1.0, 1.0, 1.0,
    0.964, 0.92, 0.76, 1.0, 1.0, 1.0, 0.92, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.12, 0.23, 0.26, 0.25, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.5, 2.0, 2.0, 0.46, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
    1.0, 1.0, 0.92, -1.0, 1.0, -1.0, 1.0, 0.5, 0.1, 0.8, -1.0, 2.0, 1.0, 1.0,
    0.1, 0.65, -1.0, 2.0, 1.0, 1.0, 1.0, -1.0, 1.0, 0.32, 0.75, -1.0, 1.0,
    1.0, 0.83, 0.5, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0,
    -1.0, 1.0, 1.0, -1.0, 2.0, -1.0, 2.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0,
    1.0, -1.0, 1.0, 1.0, 0.964, 0.92, 0.76, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 2.0, 1.0, -1.0, 1.0, 1.0, 2.0, 0.8, 1.0, 0.65, 1.0, 1.0,
    1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, -1.0, 1.0, 0.22, 0.31,
    0.08, -1.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.5,
    -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0,
    1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 0.5, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, -1.0, -1.0, -1.0, -2.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 0.42, 0.42,
    -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    1.0, 1.0, 0.02, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 0.05, 1.0, 1.0, 0.1,
    -1.0, -1.0, 0.03, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,
    -1.0, -1.0, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, 0.1, 0.25, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 2.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0,
    -1.0, -1.0, 0.1, 0.14, 0.25, -1.0, 0.85, -1.0, 0.85, -1.0, -1.0, 0.19,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.06,
    0.09 };

/* Row indices of elements in the row-compressed left-side stoichiometric matrix */
__device__
int const LHS_STOICH_IROW[355] = { 0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    16, 17, 18, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26, 27, 27, 28,
    28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 36, 37,
    37, 37, 38, 39, 39, 39, 40, 40, 40, 41, 42, 42, 42, 43, 43, 43, 44, 44,
    45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 50,
    50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 55, 55,
    55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 60, 60,
    60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 64,
    64, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 69, 69,
    70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73,
    73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76,
    76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
    76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78,
    78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 82 };

/* Column indices of elements in the row-compressed left-side stoichiometric matrix */
__device__
int const LHS_STOICH_ICOL[355] = { 193, 23, 50, 173, 52, 75, 3, 189, 53, 47,
    41, 42, 183, 186, 187, 188, 57, 58, 51, 185, 190, 191, 192, 23, 24, 25,
    14, 68, 181, 182, 12, 66, 59, 95, 184, 5, 45, 69, 73, 21, 22, 8, 33, 54,
    96, 100, 170, 171, 172, 174, 21, 24, 35, 154, 155, 156, 48, 162, 163,
    164, 55, 97, 101, 4, 44, 71, 99, 103, 16, 17, 63, 92, 147, 148, 149, 150,
    86, 115, 129, 141, 175, 176, 19, 65, 94, 78, 107, 121, 133, 79, 108, 122,
    134, 82, 111, 125, 137, 15, 62, 80, 109, 123, 135, 81, 110, 124, 136,
    143, 144, 145, 146, 85, 114, 128, 140, 13, 67, 177, 178, 179, 180, 89,
    117, 151, 152, 153, 18, 64, 93, 9, 10, 60, 90, 74, 84, 116, 130, 142, 25,
    32, 165, 166, 167, 168, 169, 157, 158, 159, 160, 161, 56, 98, 102, 20,
    70, 11, 61, 91, 87, 105, 119, 131, 28, 29, 30, 31, 32, 39, 46, 104, 105,
    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 143, 148,
    158, 166, 171, 178, 77, 106, 120, 132, 0, 22, 30, 36, 38, 40, 43, 72, 74,
    147, 180, 76, 104, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
    129, 130, 144, 149, 151, 159, 167, 26, 29, 34, 35, 37, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 146, 157, 165, 170, 177, 1, 2,
    26, 27, 28, 36, 100, 101, 102, 103, 156, 164, 176, 88, 112, 126, 138, 6,
    7, 37, 38, 39, 40, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 155, 161, 163,
    169, 186, 72, 83, 113, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139,
    140, 141, 142, 145, 150, 152, 160, 168, 27, 33, 34, 43, 44, 45, 46, 47,
    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
    66, 67, 68, 69, 70, 71, 154, 162, 173, 174, 175, 182, 183, 184, 185, 187,
    188, 189, 190, 191, 192, 49 };

/* Start-of-row indices in the row-compressed left-side stoichiometric matrix */
__device__
int const LHS_STOICH_CROW[86] = { 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7,
    8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 30, 32, 34, 35,
    37, 39, 41, 43, 46, 49, 50, 53, 56, 57, 60, 63, 65, 68, 72, 76, 80, 82,
    85, 89, 93, 97, 99, 103, 107, 111, 115, 117, 121, 126, 129, 133, 138,
    140, 145, 150, 153, 155, 158, 162, 189, 193, 204, 224, 248, 261, 265,
    286, 307, 354, 355, 355, 355 };

/* Left-side stoichiometric coefficients */
__device__
double const LHS_STOICH[355] = { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

/* Row indices of elements in the row-compressed right-side stoichiometric matrix */
__device__
int const RHS_STOICH_IROW[594] = { 0, 1, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 7, 9, 11, 12, 13, 15, 15, 15, 15, 16, 17, 22, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25,
    25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 27, 28, 29, 30, 30, 30, 31, 31,
    31, 31, 32, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 37, 38, 38, 39,
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 41, 41, 41, 41, 41,
    41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
    43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 47, 48,
    49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 52, 53,
    54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
    54, 54, 55, 56, 57, 57, 57, 57, 57, 57, 57, 58, 59, 59, 59, 59, 59, 59,
    59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 61,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 65, 65,
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 67, 68,
    68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
    72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
    74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75,
    75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
    75, 75, 76, 76, 76, 76, 76, 77, 78, 78, 78, 79, 79, 79, 79, 80, 80, 80,
    80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82 };

/* Column indices of elements in the row-compressed right-side stoichiometric matrix */
__device__
int const RHS_STOICH_ICOL[594] = { 193, 23, 47, 100, 101, 102, 103, 164, 176,
    101, 102, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 152, 164, 55,
    56, 57, 58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163, 164, 190,
    14, 9, 171, 74, 34, 188, 186, 187, 188, 189, 40, 178, 174, 53, 55, 56,
    57, 58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163, 164, 191, 55,
    56, 57, 58, 71, 97, 98, 101, 102, 103, 154, 155, 156, 162, 163, 164, 192,
    55, 56, 57, 58, 97, 98, 101, 102, 154, 155, 156, 162, 163, 164, 1, 113,
    180, 104, 57, 58, 95, 174, 177, 179, 182, 30, 72, 0, 2, 7, 23, 24, 31,
    32, 103, 156, 164, 71, 99, 170, 1, 2, 6, 22, 24, 26, 27, 28, 38, 39, 45,
    46, 9, 10, 11, 16, 17, 18, 60, 63, 64, 84, 90, 92, 93, 100, 101, 102,
    103, 130, 142, 156, 164, 176, 177, 179, 185, 164, 39, 42, 43, 90, 91, 92,
    93, 94, 95, 84, 85, 128, 130, 140, 142, 95, 58, 103, 164, 165, 167, 168,
    169, 170, 172, 173, 85, 86, 128, 129, 140, 141, 52, 53, 56, 20, 51, 77,
    78, 79, 82, 102, 120, 121, 122, 125, 132, 133, 134, 137, 156, 157, 159,
    160, 161, 54, 55, 52, 53, 59, 69, 84, 130, 142, 57, 105, 106, 107, 108,
    109, 110, 111, 112, 114, 115, 116, 143, 148, 158, 166, 103, 175, 181,
    183, 96, 97, 98, 155, 163, 84, 85, 86, 88, 126, 128, 129, 130, 138, 140,
    141, 142, 176, 177, 179, 184, 12, 16, 17, 51, 66, 69, 76, 77, 79, 80, 81,
    82, 89, 100, 101, 102, 103, 118, 119, 120, 121, 122, 123, 124, 125, 126,
    127, 128, 129, 130, 135, 136, 137, 144, 149, 151, 152, 153, 159, 164,
    165, 167, 168, 169, 170, 172, 177, 179, 185, 19, 59, 65, 75, 94, 32, 33,
    44, 45, 46, 49, 50, 51, 52, 53, 60, 61, 62, 63, 64, 65, 68, 162, 154,
    165, 167, 168, 169, 77, 78, 79, 117, 147, 157, 165, 13, 20, 51, 67, 77,
    78, 79, 80, 81, 82, 87, 89, 101, 102, 119, 120, 121, 122, 123, 124, 125,
    131, 132, 133, 134, 135, 136, 137, 151, 152, 153, 156, 157, 159, 160,
    161, 15, 50, 156, 164, 5, 10, 11, 12, 13, 17, 18, 19, 20, 27, 33, 47, 48,
    51, 57, 58, 59, 60, 63, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88,
    90, 92, 100, 101, 102, 103, 118, 119, 120, 121, 122, 123, 124, 125, 126,
    127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141,
    142, 144, 149, 151, 156, 157, 159, 160, 161, 164, 165, 167, 168, 169,
    170, 172, 176, 177, 179, 184, 51, 67, 70, 4, 5, 7, 20, 26, 29, 35, 37,
    38, 41, 45, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
    88, 89, 146, 151, 152, 153, 157, 161, 165, 169, 170, 177, 181, 182, 185,
    11, 14, 49, 66, 83, 101, 102, 103, 127, 131, 132, 133, 134, 135, 136,
    137, 138, 139, 140, 141, 142, 145, 150, 152, 160, 168, 0, 3, 6, 22, 38,
    21, 62, 156, 164, 36, 41, 44, 69, 15, 18, 19, 61, 64, 68, 73, 84, 91, 93,
    103, 130, 142, 176, 177, 3, 4, 8, 12, 13, 14, 25, 28, 29, 59, 66, 67,
    101, 102, 103, 156, 164, 173, 176, 101, 102 };

/* Start-of-row indices in the row-compressed right-side stoichiometric matrix */
__device__
int const RHS_STOICH_CROW[86] = { 0, 1, 2, 3, 9, 23, 40, 41, 42, 42, 43, 43,
    44, 45, 46, 46, 50, 51, 52, 52, 52, 52, 52, 53, 71, 88, 102, 103, 104,
    105, 106, 109, 113, 114, 115, 120, 125, 125, 126, 128, 140, 140, 165,
    165, 166, 175, 175, 181, 182, 183, 192, 198, 199, 200, 201, 221, 222,
    223, 230, 231, 246, 250, 255, 271, 320, 325, 342, 343, 344, 348, 355,
    391, 395, 475, 478, 519, 545, 550, 551, 554, 558, 573, 592, 594, 594, 594
    };

/* Right-side stoichiometric coefficients */
__device__
double const RHS_STOICH[594] = { 1.0, 1.0, 1.0, 0.4, 0.2, 0.06, 0.28, 0.01,
    0.45, 0.2, 0.29, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
    0.07, 0.00105, 0.007, 0.0054433, 0.04417, 0.0034, 0.00105, 0.007,
    0.00105, 0.007, 0.0034, 0.08103, 0.08103, 0.83663, 0.08103, 0.08103,
    0.08103, 1.075, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4, 1.0, 1.0, 0.6, 0.6, 1.0,
    1.0, 1.0, 0.2033, 0.0021, 0.01353, 0.1314, 0.17667, 0.01133, 0.0021,
    0.01353, 0.0021, 0.01353, 0.01133, 0.06936, 0.06936, 0.06936, 0.06936,
    0.06936, 0.06936, 1.075, 0.014, 0.04013, 0.3833, 0.22083, 0.0056667,
    0.014, 0.04013, 0.014, 0.04013, 0.0056667, 0.27087, 0.27087, 0.27087,
    0.27087, 0.27087, 0.27087, 1.075, 0.0525, 0.11667, 0.49289, 0.30917,
    0.0525, 0.11667, 0.0525, 0.11667, 0.459, 0.459, 0.459, 0.459, 0.459,
    0.459, 1.0, 1.0, 1.0, 1.0, 0.25, 0.17, 0.5, 1.0, 0.25, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.09, 0.02, 0.02, 1.0, 1.0,
    0.046, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.87, 1.55, 1.0, 1.0, 2.0, 1.0, 0.95, 1.0, 2.0, 1.0, 0.42,
    0.33, 0.23, 0.14, 0.475, 0.95, 0.14, 0.14, 0.22, 0.25, 0.5, 1.0, 0.46,
    1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.89, 0.16, 0.16, 0.445,
    0.16, 0.89, 1.0, 0.83, 0.65, 0.79, 0.4, 0.6, 0.6, 0.6, 1.0, 2.0, 1.0,
    0.7, 0.806, 0.7, 0.806, 0.7, 0.806, 1.0, 1.0, 1.0, 0.8, 0.025, 0.25,
    0.69, 1.06, 0.1, 0.1, 0.26, 0.75, 1.39, 0.55, 0.26, 0.75, 1.39, 0.55,
    0.53, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 0.25, 0.75, 0.9, 1.0, 2.0, 1.0, 2.0,
    0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.1, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.11, 0.17, 0.45,
    1.0, 0.75, 0.17, 0.45, 0.055, 1.0, 0.17, 0.45, 0.11, 0.9, 0.5, 1.0, 1.0,
    1.0, 0.13, 0.45, 0.009, 0.5, 1.0, 1.0, 0.09, 0.04, 1.6, 1.0, 0.28, 1.0,
    1.0, 0.53, 0.18, 0.58, 1.5, 0.75, 0.84, 0.77, 0.8, 1.55, 1.25, 0.89,
    0.75, 1.0, 1.0, 1.0, 0.5, 0.8, 0.5, 0.14, 1.0, 1.0, 1.75, 1.0, 2.0, 1.0,
    0.04, 0.25, 1.4, 0.4, 0.4, 1.0, 1.0, 0.75, 0.5, 1.0, 1.0, 0.9, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.25, 0.4, 0.4, 0.4, 0.036, 0.08, 0.24,
    1.0, 1.0, 0.2, 0.35, 1.0, 0.2, 0.075, 0.5, 0.75, 0.38, 0.35, 0.2, 1.0,
    1.45, 1.0, 1.0, 0.5, 0.72, 0.75, 0.77, 0.41, 0.46, 0.35, 0.75, 0.725,
    1.0, 0.77, 0.41, 0.46, 0.6, 1.0, 0.725, 1.0, 1.0, 2.0, 0.65, 0.8, 1.0,
    1.0, 1.0, 1.0, 1.0, 0.2, 0.16, 1.0, 2.0, 1.0, 1.0, 1.0, 0.8, 1.0, 0.98,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.17, 0.25, 0.17, 0.1, 1.0, 1.0, 1.0, 0.964,
    0.92, 0.76, 1.0, 1.0, 1.0, 0.92, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.12,
    0.23, 0.26, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 2.0,
    2.0, 0.46, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 0.92, 1.0,
    1.0, 0.5, 0.1, 0.8, 2.0, 1.0, 1.0, 0.1, 0.65, 2.0, 1.0, 1.0, 1.0, 1.0,
    0.32, 0.75, 1.0, 1.0, 0.83, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.964, 0.92, 0.76, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 0.8, 1.0, 0.65,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.22, 0.31, 0.08,
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.42, 0.42, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.02, 1.0, 1.0, 1.0, 1.0, 0.05, 1.0, 1.0, 0.1,
    0.03, 0.05, 0.1, 0.25, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, -0.9,
    0.5, 0.5, 0.1, 0.14, 0.25, 0.85, 0.85, 1.0, 0.19, 0.06, 0.09 };




#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __KPPA_CUDA_SPARSE_H__ */
/*------------------------- END kppa_CUDA_sparse.h END ------------------------*/
