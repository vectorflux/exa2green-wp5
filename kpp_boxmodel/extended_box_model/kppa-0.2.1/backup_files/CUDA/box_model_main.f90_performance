!----------------------- BEGIN box_model_main.f90 BEGIN ----------------------
! @file box_model_main.f90                                                    
! @author charlesj                                                            
! @date 2014-05-23 12:06:05.292554                                            
! @brief Fortran90 driver with plplot                                         
!                                                                             
! Fortran90 driver with plplot                                                
!                                                                             
! This file was generated by Kppa: http://www.paratools.com/Kppa              
!-----------------------------------------------------------------------------



PROGRAM main

  USE box_model_parameters
  USE box_model_integrate
  USE box_model_initialize
  USE box_model_driver_parameters
  USE box_model_monitor
  USE Wrap_NETCDF
  USE omp_lib

  IMPLICIT NONE

  INCLUDE "mpif.h"

  !---------------------------------------------------------------------------
  ! Lookat data                                                               
  !---------------------------------------------------------------------------

  INTEGER, PARAMETER :: lookatFile = 100
  CHARACTER(80), PARAMETER :: fname = "box_model.dat"

  !---------------------------------------------------------------------------
  ! Program data                                                               
  !---------------------------------------------------------------------------

  ! Integration status code 
  INTEGER :: retval
  ! Integration time 
  REAL(8) :: time
  ! Integration start time 
  REAL(8) :: TSTART
  ! Integration end time 
  REAL(8) :: TEND

  ! Absolute integration tolerances for variable species 
  REAL(8) :: abstol(81)
  ! Relative integration tolerances for variable species 
  REAL(8) :: reltol(81)

  ! Integer integration in/out parameters 
  INTEGER :: idata(20)
  ! Real value integration in/out parameters 
  REAL(8) :: rdata(20)

  REAL(8) :: energy_init, energy_final
  REAL(8) :: device_energy_init, device_energy_final

  ! Arrays for NetCDF input files                                                       
  REAL(8), ALLOCATABLE :: initial_conc_from_file(:,:,:,:)
  REAL(8), ALLOCATABLE :: temperature_from_file(:,:,:)

  ! Temperatures for all grid cells
  REAL(8), ALLOCATABLE :: TEMP(:)

  ! Species concentrations for all grid cells
  REAL(8), ALLOCATABLE :: conc(:,:)

  ! Last stepsize in each grid cell
  REAL(8), ALLOCATABLE :: lastH(:)

  ! Iterator
  INTEGER :: i,ii,jj,kk,act_hour,var_cnt

  !---------------------------------------------------------------------------
  ! Program text                                                               
  !---------------------------------------------------------------------------

  call MPI_Init()

  ! get energy counter at startup
  call energy(energy_init)
  call device_energy(device_energy_init)

  ! Initialize example grid data
  ALLOCATE(conc(NSPEC,NCELLS))
  DO i=1,NCELLS
     CALL Initialize(conc(1:NVAR,i), conc(NVAR+1:NSPEC,i))
  END DO

  ! Allocate storage for last step size (useful in reentrant solvers)
  ALLOCATE(lastH(ncells))

  ! Allocate arrays for NetCDF input files 
  ALLOCATE(initial_conc_from_file(idim,jdim,kdim,NSPEC))
  ALLOCATE(temperature_from_file(idim,jdim,kdim))

  ! Allocate temperatures for all grid cells
  ALLOCATE(TEMP(NCELLS))

  ! Initialize vector tolerances
  abstol = ATOLS
  reltol = RTOLS

  ! Initialize integration parameters to 0 = use defaults
  idata = 0
  rdata = 0

  ! Rosenbrock default parameters
  idata(1) = 0       ! System is non-autonomous: F = F(t,y)
  idata(2) = 0       ! Use vector tolerances
  idata(3) = 200000  ! Maximum number of integration steps
  idata(4) = 3       ! Rodas4 Rosenbrock method
  idata(5) = 0       ! Tolerance vectors will not be checked

!!$  rdata(1) = 0       ! Integration step size lower bound: 0 recommended
!!$  rdata(2) = 0       ! Integration step size upper bound: 0 recommended
  rdata(3) = TDEL    ! Starting integration step size
!!$  rdata(4) = 0.2     ! Lower bound on step decrease factor
!!$  rdata(5) = 6       ! Upper bound on step increase factor
!!$  rdata(6) = 0.1     ! Step decrease factor after step rejection
!!$  rdata(7) = 0.9     ! Safety factor in the computation of new step size

  ! Initialize LookAt file
  OPEN(unit=lookatFile,file=fname)

  DO act_hour=0,23

     ! Set time interval
     TSTART = act_hour*3600.0D0 !0.0D0
     TEND = TSTART + 30*120.0D0 !(24.*3600.0D0) 
     time = TSTART

     WRITE(*,101) NCELLS,TSTART,TEND
101  FORMAT("Kppa: Integrating ",I8," grid cells, time interval [",F9.2,",",F9.2,"]")

     ! Get all initial values on all of the idim*jdim*kdim boxes at time = act_hour
     CALL Get_Boxes(initial_conc_from_file, temperature_from_file, act_hour) 

     !$OMP PARALLEL DEFAULT(SHARED) &
     !$OMP PRIVATE(kk,jj,ii)
     !$OMP DO COLLAPSE(2)
     DO kk=GRID2_LOC_S,GRID2_LOC_E
        DO jj=GRID1_LOC_S,GRID1_LOC_E
           DO ii=GRID0_LOC_S,GRID0_LOC_E
              ! set temperature values for all boxes(ii, jj, kk)
              TEMP((ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                   (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                   = temperature_from_file(ii,jj,kk)
           ENDDO
        ENDDO
     ENDDO
     !$OMP END DO 
     !$OMP END PARALLEL


     IF (act_hour == 0) THEN
        !$OMP PARALLEL DEFAULT(SHARED) &
        !$OMP PRIVATE(kk,jj,ii,var_cnt)
        !$OMP DO COLLAPSE(2)
        DO kk=GRID2_LOC_S,GRID2_LOC_E
           DO jj=GRID1_LOC_S,GRID1_LOC_E
              DO ii=GRID0_LOC_S,GRID0_LOC_E
                 DO var_cnt=1,NVAR
                    ! set initial values with those of box(ii, jj, kk)
                    conc(var_cnt,(ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                         (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                         = initial_conc_from_file(ii,jj,kk,var_cnt)*CFACTOR*1000
                 ENDDO
              ENDDO
           ENDDO
        ENDDO
        !$OMP END DO 
        !$OMP END PARALLEL
     ELSE
        !$OMP PARALLEL DEFAULT(SHARED) &
        !$OMP PRIVATE(kk,jj,ii,var_cnt)
        !$OMP DO COLLAPSE(2)
        DO kk=GRID2_LOC_S,GRID2_LOC_E
           DO jj=GRID1_LOC_S,GRID1_LOC_E
              DO ii=GRID0_LOC_S,GRID0_LOC_E
                 DO var_cnt=1,n_from_file-1
                    ! set initial values with those of box(ii, jj, kk)
                    conc(lookup(var_cnt),(ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                         (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                         = initial_conc_from_file(ii,jj,kk,lookup(var_cnt))*CFACTOR*1000
                 ENDDO
              ENDDO
           ENDDO
        ENDDO
        !$OMP END DO 
        !$OMP END PARALLEL
     END IF

     ! Initialize species monitor
     CALL InitMonitor(TSTART, rdata(3))

     IF (act_hour == 0) THEN
        ! Write species concentrations to file
        CALL LookAt(TSTART, rdata(12), rdata(13))
     END IF

     retval = GridIntegrate(NCELLS, conc, TSTART, TEND, &
          abstol, reltol, idata, rdata, lastH, TEMP) 

     ! Report species concentrations to stdout
     CALL Monitor(TEND, rdata(12), rdata(13))

     ! Write species concentrations to file
     CALL LookAt(TEND, rdata(12), rdata(13))

     ! Report status
     IF (retval < 0) THEN
        WRITE(*,102) "FAILED"
     ELSE IF (retval > 0) THEN
        WRITE(*,102) "SUCCEEDED WITH WARNINGS"
     ELSE
        WRITE(*,102) "SUCCEEDED"
     END IF
102  FORMAT("Kppa: GRID INTEGRATION ",A)

!!$     ! Report statistics
!!$     WRITE(*,103) idata(13),idata(14),idata(15),idata(18), &
!!$          idata(11),idata(12),idata(16),idata(17)
!!$103  FORMAT("Kppa: Stp=",I12,", Acc=",I12,", Rej=",I12,", Sng=",I12, &
!!$          ", Fun=",I12,", Jac=",I12,", Dec=",I12,", Sol=",I12)

  END DO ! end act_hour loop

  ! Clean up and exit
  CLOSE(lookatFile)
  DEALLOCATE(conc)
  DEALLOCATE(lastH)
  DEALLOCATE(initial_conc_from_file)
  DEALLOCATE(temperature_from_file)
  DEALLOCATE(TEMP)

  ! get energy counter at end
  call energy(energy_final)
  call device_energy(device_energy_final)

  write(6,*) 
  write(6,*) 'Energy = ', energy_final-energy_init, ' Joules'
  write(6,*) 'Device energy = ', device_energy_final - device_energy_init, ' Joules'

  CALL MPI_Finalize()

  CALL EXIT(retval)
  STOP

CONTAINS

  subroutine device_energy(e)
    implicit none
    real (kind=8), intent(out) :: e

    open(unit=50, file='/sys/cray/pm_counters/accel_energy' ,action='READ')
    read(50,*) e
    close(50)
  end subroutine device_energy

  subroutine energy(e)
    implicit none
    real (kind=8), intent(out) :: e

    open(unit=50, file='/sys/cray/pm_counters/energy' ,action='READ')
    read(50,*) e
    close(50)
  end subroutine energy

  !---------------------------------- Monitor ----------------------------------
  ! Reports on species concentrations as they are calculated                    
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  ! @param[in]     err  Error in solution vector                                
  !-----------------------------------------------------------------------------
  SUBROUTINE Monitor(time, step, err)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step
    REAL(8), INTENT(IN) :: err

    REAL(8) :: perc
    REAL(8) :: cspc(NMONITOR)

    cspc(1) = conc(28,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(2) = conc(35,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(3) = conc(63,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(4) = conc(73,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(5) = conc(76,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(6) = conc(77,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(7) = conc(78,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(8) = conc(81,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR

    perc = ((time-TSTART)/ABS(TEND-TSTART))*100.0
    WRITE(*,301) perc,time,step,err,cspc
301 FORMAT(F5.1,"% | ",F9.2," | ",E9.3," | ",E9.3," | ",8(E11.4," |"))
  END SUBROUTINE Monitor

  !-------------------------------- InitMonitor --------------------------------
  ! Initializes the species monitor                                             
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  !-----------------------------------------------------------------------------
  SUBROUTINE InitMonitor(time, step)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step


    WRITE(*,401)
    WRITE(*,402) "OP1","H2O2","HCHO","HO","NO2","NO","O3","NO3"
    WRITE(*,401)
401 FORMAT(149("-"))
402 FORMAT("       |     T     |     H     | Err. Norm | ",28(A11," |"))


    CALL Monitor(time, step, ZERO)

  END SUBROUTINE InitMonitor

  !----------------------------------- LookAt ----------------------------------
  ! Writes species concentrations to file                                       
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  ! @param[in]     err  Error in solution vector                                
  !-----------------------------------------------------------------------------
  SUBROUTINE LookAt(time, step, err)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step
    REAL(8), INTENT(IN) :: err

    REAL(8) :: data(1 + NLOOKAT)

    data(1) = time / 3600.D0
    data(2) = conc(28,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(3) = conc(35,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(4) = conc(63,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(5) = conc(73,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(6) = conc(76,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(7) = conc(77,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(8) = conc(78,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    data(9) = conc(81,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR

    WRITE(lookatFile,999) data
999 FORMAT(F4.1,100(1X,E24.16))

  END SUBROUTINE LookAt

END PROGRAM main


!------------------------- END box_model_main.f90 END ------------------------
