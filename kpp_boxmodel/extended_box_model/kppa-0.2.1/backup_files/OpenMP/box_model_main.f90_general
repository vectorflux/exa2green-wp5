!----------------------- BEGIN box_model_main.f90 BEGIN ----------------------
! @file box_model_main.f90                                                    
! @author charlesj                                                            
! @date 2014-05-23 12:06:05.292554                                            
! @brief Fortran90 driver with plplot                                         
!                                                                             
! Fortran90 driver with plplot                                                
!                                                                             
! This file was generated by Kppa: http://www.paratools.com/Kppa              
!-----------------------------------------------------------------------------



PROGRAM main

  USE box_model_parameters
  USE box_model_integrate
  USE box_model_initialize
  USE box_model_driver_parameters
  USE box_model_monitor
  USE Wrap_NETCDF
  USE omp_lib

  IMPLICIT NONE

  INCLUDE "mpif.h"

  !---------------------------------------------------------------------------
  ! Lookat data                                                               
  !---------------------------------------------------------------------------

  INTEGER, PARAMETER :: lookatFile = 100
  CHARACTER(80), PARAMETER :: fname = "box_model.dat"

  !---------------------------------------------------------------------------
  ! Program data                                                               
  !---------------------------------------------------------------------------

  ! Integration status code 
  INTEGER :: retval
  ! Integration status code per timestep iteration 
  INTEGER :: tsretval
  ! Integration time 
  REAL(8) :: time
  ! Integration start time 
  REAL(8) :: TSTART
  ! Integration end time 
  REAL(8) :: TEND

  ! Absolute integration tolerances for variable species 
  REAL(8) :: abstol(81)
  ! Relative integration tolerances for variable species 
  REAL(8) :: reltol(81)

  ! Integer integration in/out parameters 
  INTEGER :: idata(20)
  ! Real value integration in/out parameters 
  REAL(8) :: rdata(20)

  REAL(8) :: TTS, TTS_init, TTS_final
  REAL(8) :: ETS, ETS_init, ETS_final
  REAL(8) :: device_ETS, device_ETS_init, device_ETS_final
  REAL(8) :: ETS_init_total, ETS_final_total
  REAL(8) :: device_ETS_init_total, device_ETS_final_total
  REAL(8) :: TTS_first_call, ETS_first_call, device_ETS_first_call
  REAL(8) :: rel_acc, weight

  ! Arrays for NetCDF input files                                                       
  REAL(8), ALLOCATABLE :: initial_conc_from_file(:,:,:,:)
  REAL(8), ALLOCATABLE :: temperature_from_file(:,:,:)

  ! Temperatures for all grid cells
  REAL(8), ALLOCATABLE :: TEMP(:)

  ! Species concentrations for all grid cells
  REAL(8), ALLOCATABLE :: conc(:,:)

  ! Integrator statistics
  INTEGER*8 :: ISTATS(8), global_ISTATS(8)

  ! Iterator
  INTEGER :: i,ii,jj,kk,act_hour,nbit,var_cnt
  INTEGER :: tsteps_first_call

  !---------------------------------------------------------------------------
  ! Program text                                                               
  !---------------------------------------------------------------------------

  CALL MPI_Init()

  ! get energy counter at startup
  CALL energy(ETS_init_total)
  CALL device_energy(device_ETS_init_total)

  ! Initialize example grid data
  ALLOCATE(conc(NSPEC,NCELLS))
  DO i=1,NCELLS
     CALL Initialize(conc(1:NVAR,i), conc(NVAR+1:NSPEC,i))
  END DO

  ! Allocate arrays for NetCDF input files 
  ALLOCATE(initial_conc_from_file(idim,jdim,kdim,NSPEC))
  ALLOCATE(temperature_from_file(idim,jdim,kdim))

  ! Allocate temperatures for all grid cells
  ALLOCATE(TEMP(NCELLS))

  ! Initialize vector tolerances
  abstol = ATOLS
  reltol = RTOLS

  ! Initialize integration parameters to 0 = use defaults
  idata = 0
  rdata = 0

  ! Initialize ETS, TTS
  TTS = 0.0d0
  ETS = 0.0d0
  device_ETS = 0.0d0
  TTS_first_call = 0.0d0
  ETS_first_call = 0.0d0
  device_ETS_first_call = 0.0d0

  nbit = 0
  tsteps_first_call = 0
  global_ISTATS(:) = 0

  ! Initialize integrator statistics
  ISTATS(:) = 0

  ! Initialize variables for relative accuracy to ref. sol.
  rel_acc = 0.0D0
  weight = 0.0D0

  ! Rosenbrock default parameters
  idata(1) = 0       ! System is non-autonomous: F = F(t,y)
  idata(2) = 1       ! Use vector tolerances
  idata(3) = 200000  ! Maximum number of integration steps
  idata(4) = 3       ! Rodas4 Rosenbrock method
  idata(5) = 0       ! Tolerance vectors will not be checked

!!$    rdata(1) = 0       ! Integration step size lower bound: 0 recommended
!!$    rdata(2) = 0       ! Integration step size upper bound: 0 recommended
!!$    rdata(3) = TDEL    ! Starting integration step size
!!$    rdata(4) = 0.2     ! Lower bound on step decrease factor
!!$    rdata(5) = 6       ! Upper bound on step increase factor
!!$    rdata(6) = 0.1     ! Step decrease factor after step rejection
!!$    rdata(7) = 0.9     ! Safety factor in the computation of new step size

  ! Initialize LookAt file
  OPEN(unit=lookatFile,file=fname)

  DO act_hour=0,23

     ! Set time interval
     TSTART = act_hour*3600.0D0 !0.0D0
     TEND = TSTART + 30*120.0D0 !(24.*3600.0D0) 
     time = TSTART

     WRITE(*,101) NCELLS,TSTART,TEND
101  FORMAT("Kppa: Integrating ",I8," grid cells, time interval [",F9.2,",",F9.2,"]")

     ! Get all initial values on all of the idim*jdim*kdim boxes at time = act_hour
     CALL Get_Boxes(initial_conc_from_file, temperature_from_file, act_hour) 

     ! Perform time integration
     retval = 0
     DO WHILE (time < TEND)
        nbit = nbit + 1

        ISTATS(:) = 0

        IF (time == TSTART) THEN
           !$OMP PARALLEL DEFAULT(SHARED) &
           !$OMP PRIVATE(kk,jj,ii)
           !$OMP DO COLLAPSE(2)
           DO kk=GRID2_LOC_S,GRID2_LOC_E
              DO jj=GRID1_LOC_S,GRID1_LOC_E
                 DO ii=GRID0_LOC_S,GRID0_LOC_E
                    ! set temperature values for all boxes(ii, jj, kk)
                    TEMP((ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                         (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                         = temperature_from_file(ii,jj,kk)
                 ENDDO
              ENDDO
           ENDDO
           !$OMP END DO 
           !$OMP END PARALLEL

           IF (act_hour == 0) THEN
              !$OMP PARALLEL DEFAULT(SHARED) &
              !$OMP PRIVATE(kk,jj,ii,var_cnt)
              !$OMP DO COLLAPSE(2)
              DO kk=GRID2_LOC_S,GRID2_LOC_E
                 DO jj=GRID1_LOC_S,GRID1_LOC_E
                    DO ii=GRID0_LOC_S,GRID0_LOC_E
                       DO var_cnt=1,NVAR
                          ! set initial values with those of box(ii, jj, kk)
                          conc(var_cnt,(ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                               (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                               = initial_conc_from_file(ii,jj,kk,var_cnt)*CFACTOR*1000
                       ENDDO
                    ENDDO
                 ENDDO
              ENDDO
              !$OMP END DO 
              !$OMP END PARALLEL
           ELSE
              !$OMP PARALLEL DEFAULT(SHARED) &
              !$OMP PRIVATE(kk,jj,ii,var_cnt)
              !$OMP DO COLLAPSE(2)
              DO kk=GRID2_LOC_S,GRID2_LOC_E
                 DO jj=GRID1_LOC_S,GRID1_LOC_E
                    DO ii=GRID0_LOC_S,GRID0_LOC_E
                       DO var_cnt=1,n_from_file-1
                          ! set initial values with those of box(ii, jj, kk)
                          conc(lookup(var_cnt),(ii-GRID0_LOC_S+1)+(jj-GRID1_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
                               (kk-GRID2_LOC_S)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) &
                               = initial_conc_from_file(ii,jj,kk,lookup(var_cnt))*CFACTOR*1000
                       ENDDO
                    ENDDO
                 ENDDO
              ENDDO
              !$OMP END DO 
              !$OMP END PARALLEL
           END IF

           ! Initialize species monitor
           CALL InitMonitor(TSTART, rdata(3))
        ENDIF

        IF (time == TSTART .AND. act_hour == 0) THEN
           ! Write species concentrations to file
           CALL LookAt(time, rdata(12), rdata(13))
        ENDIF

        ! get energy counter at startup
        CALL energy(ETS_init)
        CALL device_energy(device_ETS_init)

        TTS_init = MPI_WTIME()

        tsretval = GridIntegrate(NCELLS, conc, time, time+TDEL, &
             abstol, reltol, idata, rdata, ISTATS, TEMP)

        TTS_final = MPI_WTIME()

        ! get energy counter at end
        CALL energy(ETS_final)
        CALL device_energy(device_ETS_final)

        ETS = ETS + (ETS_final - ETS_init)
        TTS = TTS + (TTS_final - TTS_init)
        device_ETS = device_ETS + (device_ETS_final - device_ETS_init)

        IF (nbit == 1) THEN
           TTS_first_call = TTS
           ETS_first_call = ETS
           device_ETS_first_call = device_ETS
           tsteps_first_call = ISTATS(3)
        END IF

        global_ISTATS(:) = global_ISTATS(:) + ISTATS(:)

        ! Update time
        time = rdata(11)

        ! Report species concentrations to stdout
        CALL Monitor(time, rdata(12), rdata(13))

        IF (time == TEND) THEN
           ! Write species concentrations to file
           CALL LookAt(TEND, rdata(12), rdata(13))
        ENDIF

        ! Process return code
        IF (tsretval < 0) THEN
           ! Error occured: save code and abort
           retval = MIN(retval, tsretval)
           EXIT
        ELSE IF (tsretval > 0) THEN
           ! Warning occured: save code and continue
           IF (retval >= 0 .AND. retval < tsretval) THEN
              retval = tsretval;
           END IF
        END IF

        ! Use last integration step size as the starting step size
        rdata(3) = rdata(12)

     END DO
  END DO ! end act_hour loop

  ! get energy counter at end
  CALL energy(ETS_final_total)
  CALL device_energy(device_ETS_final_total)

  i = 1
  DO WHILE (i < NMONITOR + 1)
     rel_acc = rel_acc + (ref_sol(i) - conc(IMONITOR(i),GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
          (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1))/CFACTOR)**2
     weight = weight + ref_sol(i)**2
     i = i + 1
  END DO
  rel_acc = SQRT(rel_acc/weight)

  WRITE(6,*)
  WRITE(6,992) 'Total Rosenbrock function calls                 = ', global_ISTATS(1)
  WRITE(6,992) 'Total Rosenbrock jacobian calls                 = ', global_ISTATS(2)
  WRITE(6,992) 'Total Rosenbrock steps                          = ', global_ISTATS(3)
  WRITE(6,992) 'Total Rosenbrock accepted steps                 = ', global_ISTATS(4)
  WRITE(6,992) 'Total Rosenbrock rejected steps                 = ', global_ISTATS(5)
  WRITE(6,992) 'Total Rosenbrock LU decompositions              = ', global_ISTATS(6)
  WRITE(6,992) 'Total Rosenbrock forward/backward substitutions = ', global_ISTATS(7)
  WRITE(6,992) 'Total Rosenbrock singular matrix decompositions = ', global_ISTATS(8)
  WRITE(6,*)
  WRITE(6,999) 'Absolute Tolerance = ', ATOLS
  WRITE(6,999) 'Relative Tolerance = ', RTOLS
  WRITE(6,*)
  WRITE(6,995) 'IDATA = ', IDATA
  WRITE(6,996) 'RDATA = ', RDATA
  WRITE(6,*)
  WRITE(6,991) 'Total number of timesteps = ', INT(TEND/TDEL) 
  WRITE(6,*)
  WRITE(6,998) 'Subgrid coordinates (lon.)  = ', GRID0_LOC_S, GRID0_LOC_E
  WRITE(6,998) 'Subgrid coordinates (lat.)  = ', GRID1_LOC_S, GRID1_LOC_E
  WRITE(6,998) 'Subgrid coordinates (vert.) = ', GRID2_LOC_S, GRID2_LOC_E
  WRITE(6,*)
  WRITE(6,992) 'Total number of grid points = ', ncells
  WRITE(6,*)
  WRITE(6,*)   '******** First Timestep ********'
  WRITE(6,992) 'Rosenbrock steps = ', INT(tsteps_first_call/ncells)
  WRITE(6,993) 'TTS              = ', TTS_first_call, ' s'
  WRITE(6,994) 'ETS              = ', ETS_first_call, ' J'
  WRITE(6,994) 'Device ETS       = ', device_ETS_first_call, ' J'
  WRITE(6,*)
  WRITE(6,*)   '******** In Average ********'
  WRITE(6,992) 'Rosenbrock steps = ', INT(global_ISTATS(3)/(ncells*nbit))
  WRITE(6,993) 'TTS              = ', TTS/nbit, ' s'
  WRITE(6,994) 'ETS              = ', ETS/nbit, ' J'
  WRITE(6,994) 'Device ETS       = ', device_ETS/nbit, ' J'
  WRITE(6,*)
  WRITE(6,*)   '******** Total Timesteps ********'
  WRITE(6,992) 'Rosenbrock steps = ', INT(global_ISTATS(3)/ncells)
  WRITE(6,993) 'TTS              = ', TTS, ' s'
  WRITE(6,994) 'ETS              = ', ETS, ' J'
  WRITE(6,994) 'Device ETS       = ', device_ETS, ' J'
  WRITE(6,*)
  WRITE(6,*)   '******** Entire application ********'
  WRITE(6,994) 'ETS              = ', ETS_final_total-ETS_init_total, ' J'
  WRITE(6,994) 'Device ETS       = ', device_ETS_final_total-device_ETS_init_total, ' J'
  WRITE(6,*)
  WRITE(6,997) 'Relative accuracy to ref. sol. = ', rel_acc 
  WRITE(6,*)

991 FORMAT(A,I4)
992 FORMAT(A,I11)
993 FORMAT(A,F11.3,A)
994 FORMAT(A,F11.1,A)
995 FORMAT(A,20(I7,","))
996 FORMAT(A,20(F7.2,","))
997 FORMAT(A,E11.4)
998 FORMAT(A,I5,I5)
999 FORMAT(A,F6.2)

  CALL MPI_Finalize()

  ! Clean up and exit
  CLOSE(lookatFile)

  DEALLOCATE(conc)
  DEALLOCATE(initial_conc_from_file)
  DEALLOCATE(temperature_from_file)
  DEALLOCATE(TEMP)

  CALL EXIT(retval)
  STOP

CONTAINS

  SUBROUTINE device_energy(e)
    IMPLICIT NONE
    REAL (kind=8), INTENT(out) :: e

    OPEN(unit=50, file='/sys/cray/pm_counters/accel_energy' ,action='READ')
    READ(50,*) e
    CLOSE(50)
  END SUBROUTINE device_energy

  SUBROUTINE energy(e)
    IMPLICIT NONE
    REAL (kind=8), INTENT(out) :: e

    OPEN(unit=50, file='/sys/cray/pm_counters/energy' ,action='READ')
    READ(50,*) e
    CLOSE(50)
  END SUBROUTINE energy

  !---------------------------------- Monitor ----------------------------------
  ! Reports on species concentrations as they are calculated                    
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  ! @param[in]     err  Error in solution vector                                
  !-----------------------------------------------------------------------------
  SUBROUTINE Monitor(time, step, err)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step
    REAL(8), INTENT(IN) :: err

    REAL(8) :: perc
    REAL(8) :: cspc(NMONITOR)

    cspc(1) = conc(28,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(2) = conc(35,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(3) = conc(63,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(4) = conc(73,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(5) = conc(76,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(6) = conc(77,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(7) = conc(78,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    cspc(8) = conc(81,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR

    perc = ((time-TSTART)/ABS(TEND-TSTART))*100.0
    WRITE(*,301) perc,time,step,err,cspc
301 FORMAT(F5.1,"% | ",F9.2," | ",E9.3," | ",E9.3," | ",8(E11.4," |"))
  END SUBROUTINE Monitor

  !-------------------------------- InitMonitor --------------------------------
  ! Initializes the species monitor                                             
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  !-----------------------------------------------------------------------------
  SUBROUTINE InitMonitor(time, step)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step


    WRITE(*,401)
    WRITE(*,402) "OP1","H2O2","HCHO","HO","NO2","NO","O3","NO3"
    WRITE(*,401)
401 FORMAT(149("-"))
402 FORMAT("       |     T     |     H     | Err. Norm | ",28(A11," |"))


    CALL Monitor(time, step, ZERO)

  END SUBROUTINE InitMonitor

  !----------------------------------- LookAt ----------------------------------
  ! Writes species concentrations to file                                       
  !                                                                             
  ! @param[in]     step Last accepted integrator time step (H)                  
  ! @param[in]     err  Error in solution vector                                
  !-----------------------------------------------------------------------------
  SUBROUTINE LookAt(time, step, err)
    IMPLICIT NONE

    REAL(8), INTENT(IN) :: time
    REAL(8), INTENT(IN) :: step
    REAL(8), INTENT(IN) :: err

    REAL(8) :: DATA(1 + NLOOKAT)

    DATA(1) = time / 3600.D0
    DATA(2) = conc(28,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(3) = conc(35,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(4) = conc(63,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(5) = conc(73,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(6) = conc(76,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(7) = conc(77,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(8) = conc(78,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR
    DATA(9) = conc(81,GRID0_SPOT+(GRID1_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1) + &
         (GRID2_SPOT-1)*(GRID0_LOC_E-GRID0_LOC_S+1)*(GRID1_LOC_E-GRID1_LOC_S+1)) / CFACTOR

    WRITE(lookatFile,999) DATA
999 FORMAT(F4.1,100(1X,E24.16))

  END SUBROUTINE LookAt

END PROGRAM main


!------------------------- END box_model_main.f90 END ------------------------
