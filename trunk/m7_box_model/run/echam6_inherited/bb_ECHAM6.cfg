# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
#	BuildSlave("mpipc", "bot1passwd", max_builds=1), 
        BuildSlave("mpipc", "bot1passwd"),

	BuildSlave("blizzard", "bot1passwd"),
	BuildSlave("tornado", "bot1passwd"),
	BuildSlave("squall", "bot1passwd")
	]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("mpipc91", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=2401)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("127.0.0.1", 2401, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

# WS 10*60 gibt wieviel Zeit zwischen dem Triggersignal und dem Start der builder liegen soll

from buildbot.scheduler import AnyBranchScheduler
from buildbot import scheduler

s1 = AnyBranchScheduler('main',
                             ['echam-6.0.00_a1'],
                             1*30, 
			     [
				'BLIZZ_nMnO',
#				'BLIZZ_nMyO',
				'BLIZZ_yMnO',
#				'BLIZZ_yMyO',

				'MPIPC_gcc', 
				'MPIPC_nag', 
				'MPIPC_intel', 
				'MPIPC_pgi', 
				'MPIPC_sun', 

				'TORNADO_gcc', 
				'TORNADO_nag',
				'TORNADO_intel', 
				'TORNADO_pgi',
				'TORNADO_sun',

				'SQUALL_gcc', 
				'SQUALL_nag', 
				'SQUALL_intel', 
				'SQUALL_pgi', 
				'SQUALL_sun'
			     ]
                        )
nightly = scheduler.Nightly(name='nightly',
             builderNames=[
				'BLIZZ_nMnO',
#				'BLIZZ_nMyO',
				'BLIZZ_yMnO',
#				'BLIZZ_yMyO',

				'MPIPC_gcc', 
				'MPIPC_nag', 
				'MPIPC_intel', 
				'MPIPC_pgi', 
				'MPIPC_sun', 

				'TORNADO_gcc', 
				'TORNADO_nag',
				'TORNADO_intel', 
				'TORNADO_pgi',
				'TORNADO_sun',

				'SQUALL_gcc', 
				'SQUALL_nag', 
				'SQUALL_intel', 
				'SQUALL_pgi', 
				'SQUALL_sun', 

],
branch='echam-6.0.00_a1',
             hour=4,
             minute=0)


c['schedulers'] = [s1,nightly]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps import source, shell
from buildbot.steps.shell import ShellCommand

f = factory.BuildFactory()
f.addStep(ShellCommand(command='rm -rf *'))
f.addStep(source.SVN(mode='update',
                          baseURL='http://svn.zmaw.de/svn/echam6/branches/',
                          defaultBranch='echam-6.0.00_a1'))
f.addStep(ShellCommand(command=["run/bb_make"],haltOnFailure=True))
f.addStep(ShellCommand(command=["run/bb_run"],timeout=72000))

c['builders'] = [
      {'name':'BLIZZ_nMnO', 'slavename':'blizzard', 'builddir':'blizz_nMnO','factory':f , 'env': {'BB_SYSTEM': 'blizzard', 'BB_SLAVE': 'blizz_nMnO'} },
      {'name':'BLIZZ_nMyO', 'slavename':'blizzard', 'builddir':'blizz_nMyO','factory':f , 'env': {'BB_SYSTEM': 'blizzard', 'BB_SLAVE': 'blizz_nMyO'} },
      {'name':'BLIZZ_yMnO', 'slavename':'blizzard', 'builddir':'blizz_yMnO','factory':f , 'env': {'BB_SYSTEM': 'blizzard', 'BB_SLAVE': 'blizz_yMnO'} },
      {'name':'BLIZZ_yMyO', 'slavename':'blizzard', 'builddir':'blizz_yMyO','factory':f , 'env': {'BB_SYSTEM': 'blizzard', 'BB_SLAVE': 'blizz_yMyO'} },

      {'name':'MPIPC_gcc', 'slavename':'mpipc', 'builddir':'mpipc_gcc','factory':f , 'env': {'BB_SYSTEM': 'mpipc', 'BB_SLAVE': 'mpipc_gcc'} },
      {'name':'MPIPC_nag', 'slavename':'mpipc', 'builddir':'mpipc_nag','factory':f , 'env': {'BB_SYSTEM': 'mpipc', 'BB_SLAVE': 'mpipc_nag'} },
      {'name':'MPIPC_intel', 'slavename':'mpipc', 'builddir':'mpipc_intel','factory':f , 'env': {'BB_SYSTEM': 'mpipc', 'BB_SLAVE': 'mpipc_intel'} },
      {'name':'MPIPC_pgi', 'slavename':'mpipc', 'builddir':'mpipc_pgi','factory':f , 'env': {'BB_SYSTEM': 'mpipc', 'BB_SLAVE': 'mpipc_pgi'} },
      {'name':'MPIPC_sun', 'slavename':'mpipc', 'builddir':'mpipc_sun','factory':f , 'env': {'BB_SYSTEM': 'mpipc', 'BB_SLAVE': 'mpipc_sun'} },

      {'name':'SQUALL_gcc', 'slavename':'squall', 'builddir':'squall_gcc','factory':f , 'env': {'BB_SYSTEM': 'squall', 'BB_SLAVE': 'squall_gcc'}},
      {'name':'SQUALL_nag', 'slavename':'squall', 'builddir':'squall_nag','factory':f , 'env': {'BB_SYSTEM': 'squall', 'BB_SLAVE': 'squall_nag'}},
      {'name':'SQUALL_intel', 'slavename':'squall', 'builddir':'squall_intel','factory':f , 'env': {'BB_SYSTEM': 'squall', 'BB_SLAVE': 'squall_intel'}},
      {'name':'SQUALL_pgi', 'slavename':'squall', 'builddir':'squall_pgi','factory':f , 'env': {'BB_SYSTEM': 'squall', 'BB_SLAVE': 'squall_pgi'}},
      {'name':'SQUALL_sun', 'slavename':'squall', 'builddir':'squall_sun','factory':f , 'env': {'BB_SYSTEM': 'squall', 'BB_SLAVE': 'squall_sun'}},

      {'name':'TORNADO_gcc', 'slavename':'tornado', 'builddir':'tornado_gcc','factory':f , 'env': {'BB_SYSTEM': 'tornado', 'BB_SLAVE': 'tornado_gcc'}},
      {'name':'TORNADO_nag', 'slavename':'tornado', 'builddir':'tornado_nag','factory':f , 'env': {'BB_SYSTEM': 'tornado', 'BB_SLAVE': 'tornado_nag'}},
      {'name':'TORNADO_intel', 'slavename':'tornado', 'builddir':'tornado_intel','factory':f , 'env': {'BB_SYSTEM': 'tornado', 'BB_SLAVE': 'tornado_intel'}},
      {'name':'TORNADO_pgi', 'slavename':'tornado', 'builddir':'tornado_pgi','factory':f , 'env': {'BB_SYSTEM': 'tornado', 'BB_SLAVE': 'tornado_pgi'}},
      {'name':'TORNADO_sun', 'slavename':'tornado', 'builddir':'tornado_sun','factory':f , 'env': {'BB_SYSTEM': 'tornado', 'BB_SLAVE': 'tornado_sun'}}

      ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html

from buildbot.status.html import WebStatus
#from buildbot.status.web.authentication import BasicAuth
users = [('walter', 'secret-pass'), ('ws', 'super-pass')]

#c['status'].append(WebStatus(http_port=8080, auth=BasicAuth(users),allowForce=True))
		         
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="BUILDBOT_ECHAM<walter.sauf@zmaw.de>",
                                     extraRecipients=[
				     	"walter.sauf@zmaw.de"
#					,"monika.esch@zmaw.de"
				     ],
                                     mode='failing',
                                     subject='[BUILDBOT ECHAM] %(builder)s BUILD FAILED',
                                     relayhost="smtp.zmaw.de",
                                     sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "ECHAM6"
c['projectURL'] = "http://www.mpimet.mpg.de/en/wissenschaft/modelle/echam/echam5.html"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://mpipc91.mpi.zmaw.de:8010/"
